"""
Sprint 2 - An√°lise de Pull Requests do GitHub
Lab 03 - Caracterizando a atividade de code review no GitHub

Este script realiza an√°lises estat√≠sticas e responde √†s 8 quest√µes de pesquisa (RQs)
sobre a rela√ß√£o entre caracter√≠sticas dos PRs e:
- Dimens√£o A: Feedback final das revis√µes (status do PR)
- Dimens√£o B: N√∫mero de revis√µes realizadas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from datetime import datetime
import json
import os
from pathlib import Path

# Configura√ß√£o de estilo dos gr√°ficos
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 6)
plt.rcParams['font.size'] = 10

class AnalisadorPRs:
    def __init__(self, arquivo_dataset: str = "dataset_prs.csv"):
        """
        Inicializa o analisador de PRs
        
        Args:
            arquivo_dataset: Nome do arquivo CSV com os dados dos PRs
        """
        self.caminho_base = Path("/Users/pedroafonso/lab3")
        self.caminho_dataset = self.caminho_base / arquivo_dataset
        self.caminho_graficos = self.caminho_base / "graficos"
        self.caminho_graficos.mkdir(exist_ok=True)
        
        self.df = None
        self.resultados = {}
        
    def carregar_dados(self) -> bool:
        """
        Carrega o dataset de PRs
        
        Returns:
            True se carregou com sucesso, False caso contr√°rio
        """
        print("=" * 80)
        print("SPRINT 2 - AN√ÅLISE DE PULL REQUESTS")
        print("=" * 80)
        print()
        
        if not self.caminho_dataset.exists():
            print(f"‚ùå Erro: Arquivo {self.caminho_dataset} n√£o encontrado!")
            print("Execute primeiro a Sprint 1 para coletar os dados.")
            return False
        
        print(f"üìÇ Carregando dataset: {self.caminho_dataset}")
        self.df = pd.read_csv(self.caminho_dataset)
        
        print(f"‚úì Dataset carregado com sucesso!")
        print(f"  ‚Ä¢ Total de PRs: {len(self.df)}")
        print(f"  ‚Ä¢ Reposit√≥rios √∫nicos: {self.df['repository'].nunique()}")
        print(f"  ‚Ä¢ PRs merged: {len(self.df[self.df['merged'] == True])}")
        print(f"  ‚Ä¢ PRs closed (n√£o merged): {len(self.df[self.df['merged'] == False])}")
        print()
        
        return True
    
    def preparar_dados(self):
        """
        Prepara e limpa os dados para an√°lise
        """
        print("üîß Preparando dados para an√°lise...")
        
        # Converter colunas booleanas
        self.df['merged'] = self.df['merged'].astype(bool)
        
        # Adicionar vari√°vel categ√≥rica para o status
        self.df['status_categoria'] = self.df['merged'].map({True: 'MERGED', False: 'CLOSED'})
        
        # Calcular tamanho total das mudan√ßas
        self.df['total_changes'] = self.df['total_additions'] + self.df['total_deletions']
        
        # Criar categorias de tamanho
        self.df['tamanho_categoria'] = pd.cut(
            self.df['total_changes'],
            bins=[0, 50, 200, 500, float('inf')],
            labels=['Pequeno', 'M√©dio', 'Grande', 'Muito Grande']
        )
        
        # Criar categorias de tempo
        self.df['tempo_categoria'] = pd.cut(
            self.df['time_analysis_hours'],
            bins=[0, 24, 168, 720, float('inf')],
            labels=['< 1 dia', '1-7 dias', '1-30 dias', '> 30 dias']
        )
        
        # Criar categorias de descri√ß√£o
        self.df['descricao_categoria'] = pd.cut(
            self.df['description_chars'],
            bins=[0, 100, 500, 1000, float('inf')],
            labels=['Muito Curta', 'Curta', 'M√©dia', 'Longa']
        )
        
        # Criar categorias de intera√ß√µes
        self.df['interacoes_categoria'] = pd.cut(
            self.df['num_comments'],
            bins=[0, 5, 15, 30, float('inf')],
            labels=['Baixa', 'M√©dia', 'Alta', 'Muito Alta']
        )
        
        # Remover outliers extremos (opcional)
        for col in ['total_changes', 'time_analysis_hours', 'description_chars', 'num_comments']:
            q1 = self.df[col].quantile(0.01)
            q99 = self.df[col].quantile(0.99)
            self.df[f'{col}_sem_outliers'] = self.df[col].clip(q1, q99)
        
        print("‚úì Dados preparados!")
        print()
    
    def calcular_correlacao(self, var1: str, var2: str) -> tuple:
        """
        Calcula correla√ß√£o de Spearman entre duas vari√°veis
        
        Args:
            var1: Nome da primeira vari√°vel
            var2: Nome da segunda vari√°vel
            
        Returns:
            Tupla (correla√ß√£o, p-valor)
        """
        # Remover valores nulos
        dados = self.df[[var1, var2]].dropna()
        
        if len(dados) < 3:
            return None, None
        
        # Correla√ß√£o de Spearman (n√£o assume distribui√ß√£o normal)
        corr, p_value = stats.spearmanr(dados[var1], dados[var2])
        
        return corr, p_value
    
    def teste_mann_whitney(self, var_continua: str, var_binaria: str) -> tuple:
        """
        Realiza teste de Mann-Whitney U para comparar duas grupos
        
        Args:
            var_continua: Nome da vari√°vel cont√≠nua
            var_binaria: Nome da vari√°vel bin√°ria (deve ter 2 categorias)
            
        Returns:
            Tupla (estat√≠stica U, p-valor)
        """
        grupos = self.df[var_binaria].unique()
        
        if len(grupos) != 2:
            return None, None
        
        grupo1 = self.df[self.df[var_binaria] == grupos[0]][var_continua].dropna()
        grupo2 = self.df[self.df[var_binaria] == grupos[1]][var_continua].dropna()
        
        if len(grupo1) < 3 or len(grupo2) < 3:
            return None, None
        
        u_stat, p_value = stats.mannwhitneyu(grupo1, grupo2, alternative='two-sided')
        
        return u_stat, p_value
    
    def interpretar_correlacao(self, corr: float) -> str:
        """
        Interpreta o valor da correla√ß√£o
        
        Args:
            corr: Coeficiente de correla√ß√£o
            
        Returns:
            String com interpreta√ß√£o
        """
        abs_corr = abs(corr)
        
        if abs_corr < 0.1:
            forca = "muito fraca"
        elif abs_corr < 0.3:
            forca = "fraca"
        elif abs_corr < 0.5:
            forca = "moderada"
        elif abs_corr < 0.7:
            forca = "forte"
        else:
            forca = "muito forte"
        
        direcao = "positiva" if corr > 0 else "negativa"
        
        return f"{forca} {direcao}"
    
    def interpretar_p_valor(self, p: float) -> str:
        """
        Interpreta o p-valor
        
        Args:
            p: P-valor
            
        Returns:
            String com interpreta√ß√£o
        """
        if p < 0.001:
            return "altamente significativo (p < 0.001)"
        elif p < 0.01:
            return "muito significativo (p < 0.01)"
        elif p < 0.05:
            return "significativo (p < 0.05)"
        else:
            return "n√£o significativo (p ‚â• 0.05)"
    
    # ========================================================================
    # DIMENS√ÉO A: FEEDBACK FINAL DAS REVIS√ïES (STATUS DO PR)
    # ========================================================================
    
    def rq01_tamanho_vs_status(self):
        """
        RQ 01: Qual a rela√ß√£o entre o tamanho dos PRs e o feedback final das revis√µes?
        """
        print("=" * 80)
        print("RQ 01: TAMANHO DOS PRS vs FEEDBACK FINAL")
        print("=" * 80)
        print()
        
        # An√°lise estat√≠stica
        u_stat, p_value = self.teste_mann_whitney('total_changes', 'merged')
        
        # Estat√≠sticas descritivas
        merged_stats = self.df[self.df['merged'] == True]['total_changes'].describe()
        closed_stats = self.df[self.df['merged'] == False]['total_changes'].describe()
        
        print("üìä Estat√≠sticas Descritivas:")
        print(f"\nPRs MERGED:")
        print(f"  ‚Ä¢ M√©dia: {merged_stats['mean']:.2f} linhas")
        print(f"  ‚Ä¢ Mediana: {merged_stats['50%']:.2f} linhas")
        print(f"  ‚Ä¢ Desvio padr√£o: {merged_stats['std']:.2f}")
        
        print(f"\nPRs CLOSED:")
        print(f"  ‚Ä¢ M√©dia: {closed_stats['mean']:.2f} linhas")
        print(f"  ‚Ä¢ Mediana: {closed_stats['50%']:.2f} linhas")
        print(f"  ‚Ä¢ Desvio padr√£o: {closed_stats['std']:.2f}")
        
        print(f"\nüìà Teste Estat√≠stico (Mann-Whitney U):")
        print(f"  ‚Ä¢ Estat√≠stica U: {u_stat:.2f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o: {self.interpretar_p_valor(p_value)}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Boxplot
        self.df.boxplot(column='total_changes_sem_outliers', by='status_categoria', ax=axes[0])
        axes[0].set_title('Distribui√ß√£o do Tamanho por Status')
        axes[0].set_xlabel('Status do PR')
        axes[0].set_ylabel('Total de Mudan√ßas (linhas)')
        plt.sca(axes[0])
        plt.xticks(rotation=0)
        
        # Violin plot
        sns.violinplot(data=self.df, x='status_categoria', y='total_changes_sem_outliers', ax=axes[1])
        axes[1].set_title('Densidade do Tamanho por Status')
        axes[1].set_xlabel('Status do PR')
        axes[1].set_ylabel('Total de Mudan√ßas (linhas)')
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq01_tamanho_vs_status.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq01_tamanho_vs_status.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ01'] = {
            'titulo': 'Tamanho dos PRs vs Feedback Final',
            'u_stat': u_stat,
            'p_value': p_value,
            'merged_mean': merged_stats['mean'],
            'closed_mean': closed_stats['mean'],
            'significativo': p_value < 0.05
        }
    
    def rq02_tempo_vs_status(self):
        """
        RQ 02: Qual a rela√ß√£o entre o tempo de an√°lise dos PRs e o feedback final das revis√µes?
        """
        print("=" * 80)
        print("RQ 02: TEMPO DE AN√ÅLISE vs FEEDBACK FINAL")
        print("=" * 80)
        print()
        
        # An√°lise estat√≠stica
        u_stat, p_value = self.teste_mann_whitney('time_analysis_hours', 'merged')
        
        # Estat√≠sticas descritivas
        merged_stats = self.df[self.df['merged'] == True]['time_analysis_hours'].describe()
        closed_stats = self.df[self.df['merged'] == False]['time_analysis_hours'].describe()
        
        print("üìä Estat√≠sticas Descritivas:")
        print(f"\nPRs MERGED:")
        print(f"  ‚Ä¢ M√©dia: {merged_stats['mean']:.2f} horas ({merged_stats['mean']/24:.2f} dias)")
        print(f"  ‚Ä¢ Mediana: {merged_stats['50%']:.2f} horas ({merged_stats['50%']/24:.2f} dias)")
        print(f"  ‚Ä¢ Desvio padr√£o: {merged_stats['std']:.2f} horas")
        
        print(f"\nPRs CLOSED:")
        print(f"  ‚Ä¢ M√©dia: {closed_stats['mean']:.2f} horas ({closed_stats['mean']/24:.2f} dias)")
        print(f"  ‚Ä¢ Mediana: {closed_stats['50%']:.2f} horas ({closed_stats['50%']/24:.2f} dias)")
        print(f"  ‚Ä¢ Desvio padr√£o: {closed_stats['std']:.2f} horas")
        
        print(f"\nüìà Teste Estat√≠stico (Mann-Whitney U):")
        print(f"  ‚Ä¢ Estat√≠stica U: {u_stat:.2f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o: {self.interpretar_p_valor(p_value)}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Boxplot
        self.df.boxplot(column='time_analysis_hours_sem_outliers', by='status_categoria', ax=axes[0])
        axes[0].set_title('Distribui√ß√£o do Tempo de An√°lise por Status')
        axes[0].set_xlabel('Status do PR')
        axes[0].set_ylabel('Tempo de An√°lise (horas)')
        plt.sca(axes[0])
        plt.xticks(rotation=0)
        
        # Histogram comparativo
        merged_data = self.df[self.df['merged'] == True]['time_analysis_hours_sem_outliers']
        closed_data = self.df[self.df['merged'] == False]['time_analysis_hours_sem_outliers']
        
        axes[1].hist([merged_data, closed_data], bins=30, label=['MERGED', 'CLOSED'], alpha=0.7)
        axes[1].set_title('Histograma do Tempo de An√°lise por Status')
        axes[1].set_xlabel('Tempo de An√°lise (horas)')
        axes[1].set_ylabel('Frequ√™ncia')
        axes[1].legend()
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq02_tempo_vs_status.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq02_tempo_vs_status.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ02'] = {
            'titulo': 'Tempo de An√°lise vs Feedback Final',
            'u_stat': u_stat,
            'p_value': p_value,
            'merged_mean': merged_stats['mean'],
            'closed_mean': closed_stats['mean'],
            'significativo': p_value < 0.05
        }
    
    def rq03_descricao_vs_status(self):
        """
        RQ 03: Qual a rela√ß√£o entre a descri√ß√£o dos PRs e o feedback final das revis√µes?
        """
        print("=" * 80)
        print("RQ 03: DESCRI√á√ÉO DOS PRS vs FEEDBACK FINAL")
        print("=" * 80)
        print()
        
        # An√°lise estat√≠stica
        u_stat, p_value = self.teste_mann_whitney('description_chars', 'merged')
        
        # Estat√≠sticas descritivas
        merged_stats = self.df[self.df['merged'] == True]['description_chars'].describe()
        closed_stats = self.df[self.df['merged'] == False]['description_chars'].describe()
        
        print("üìä Estat√≠sticas Descritivas:")
        print(f"\nPRs MERGED:")
        print(f"  ‚Ä¢ M√©dia: {merged_stats['mean']:.2f} caracteres")
        print(f"  ‚Ä¢ Mediana: {merged_stats['50%']:.2f} caracteres")
        print(f"  ‚Ä¢ Desvio padr√£o: {merged_stats['std']:.2f}")
        
        print(f"\nPRs CLOSED:")
        print(f"  ‚Ä¢ M√©dia: {closed_stats['mean']:.2f} caracteres")
        print(f"  ‚Ä¢ Mediana: {closed_stats['50%']:.2f} caracteres")
        print(f"  ‚Ä¢ Desvio padr√£o: {closed_stats['std']:.2f}")
        
        print(f"\nüìà Teste Estat√≠stico (Mann-Whitney U):")
        print(f"  ‚Ä¢ Estat√≠stica U: {u_stat:.2f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o: {self.interpretar_p_valor(p_value)}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Boxplot
        self.df.boxplot(column='description_chars_sem_outliers', by='status_categoria', ax=axes[0])
        axes[0].set_title('Distribui√ß√£o do Tamanho da Descri√ß√£o por Status')
        axes[0].set_xlabel('Status do PR')
        axes[0].set_ylabel('Tamanho da Descri√ß√£o (caracteres)')
        plt.sca(axes[0])
        plt.xticks(rotation=0)
        
        # Gr√°fico de barras por categoria
        df_descricao = self.df.groupby(['descricao_categoria', 'status_categoria']).size().unstack(fill_value=0)
        df_descricao_pct = df_descricao.div(df_descricao.sum(axis=1), axis=0) * 100
        df_descricao_pct.plot(kind='bar', ax=axes[1], rot=45)
        axes[1].set_title('Propor√ß√£o de Status por Tamanho de Descri√ß√£o')
        axes[1].set_xlabel('Tamanho da Descri√ß√£o')
        axes[1].set_ylabel('Porcentagem (%)')
        axes[1].legend(title='Status')
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq03_descricao_vs_status.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq03_descricao_vs_status.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ03'] = {
            'titulo': 'Descri√ß√£o dos PRs vs Feedback Final',
            'u_stat': u_stat,
            'p_value': p_value,
            'merged_mean': merged_stats['mean'],
            'closed_mean': closed_stats['mean'],
            'significativo': p_value < 0.05
        }
    
    def rq04_interacoes_vs_status(self):
        """
        RQ 04: Qual a rela√ß√£o entre as intera√ß√µes nos PRs e o feedback final das revis√µes?
        """
        print("=" * 80)
        print("RQ 04: INTERA√á√ïES NOS PRS vs FEEDBACK FINAL")
        print("=" * 80)
        print()
        
        # An√°lise estat√≠stica para coment√°rios
        u_stat_comments, p_value_comments = self.teste_mann_whitney('num_comments', 'merged')
        
        # An√°lise estat√≠stica para participantes
        u_stat_participants, p_value_participants = self.teste_mann_whitney('num_participants', 'merged')
        
        # Estat√≠sticas descritivas - Coment√°rios
        merged_comments = self.df[self.df['merged'] == True]['num_comments'].describe()
        closed_comments = self.df[self.df['merged'] == False]['num_comments'].describe()
        
        # Estat√≠sticas descritivas - Participantes
        merged_participants = self.df[self.df['merged'] == True]['num_participants'].describe()
        closed_participants = self.df[self.df['merged'] == False]['num_participants'].describe()
        
        print("üìä Estat√≠sticas Descritivas - COMENT√ÅRIOS:")
        print(f"\nPRs MERGED:")
        print(f"  ‚Ä¢ M√©dia: {merged_comments['mean']:.2f} coment√°rios")
        print(f"  ‚Ä¢ Mediana: {merged_comments['50%']:.2f} coment√°rios")
        
        print(f"\nPRs CLOSED:")
        print(f"  ‚Ä¢ M√©dia: {closed_comments['mean']:.2f} coment√°rios")
        print(f"  ‚Ä¢ Mediana: {closed_comments['50%']:.2f} coment√°rios")
        
        print(f"\nüìà Teste Estat√≠stico - Coment√°rios (Mann-Whitney U):")
        print(f"  ‚Ä¢ Estat√≠stica U: {u_stat_comments:.2f}")
        print(f"  ‚Ä¢ P-valor: {p_value_comments:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o: {self.interpretar_p_valor(p_value_comments)}")
        
        print(f"\nüìä Estat√≠sticas Descritivas - PARTICIPANTES:")
        print(f"\nPRs MERGED:")
        print(f"  ‚Ä¢ M√©dia: {merged_participants['mean']:.2f} participantes")
        print(f"  ‚Ä¢ Mediana: {merged_participants['50%']:.2f} participantes")
        
        print(f"\nPRs CLOSED:")
        print(f"  ‚Ä¢ M√©dia: {closed_participants['mean']:.2f} participantes")
        print(f"  ‚Ä¢ Mediana: {closed_participants['50%']:.2f} participantes")
        
        print(f"\nüìà Teste Estat√≠stico - Participantes (Mann-Whitney U):")
        print(f"  ‚Ä¢ Estat√≠stica U: {u_stat_participants:.2f}")
        print(f"  ‚Ä¢ P-valor: {p_value_participants:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o: {self.interpretar_p_valor(p_value_participants)}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # Boxplot - Coment√°rios
        self.df.boxplot(column='num_comments_sem_outliers', by='status_categoria', ax=axes[0, 0])
        axes[0, 0].set_title('Distribui√ß√£o de Coment√°rios por Status')
        axes[0, 0].set_xlabel('Status do PR')
        axes[0, 0].set_ylabel('N√∫mero de Coment√°rios')
        plt.sca(axes[0, 0])
        plt.xticks(rotation=0)
        
        # Boxplot - Participantes
        self.df.boxplot(column='num_participants', by='status_categoria', ax=axes[0, 1])
        axes[0, 1].set_title('Distribui√ß√£o de Participantes por Status')
        axes[0, 1].set_xlabel('Status do PR')
        axes[0, 1].set_ylabel('N√∫mero de Participantes')
        plt.sca(axes[0, 1])
        plt.xticks(rotation=0)
        
        # Scatter plot - Coment√°rios vs Participantes
        for status in ['MERGED', 'CLOSED']:
            data = self.df[self.df['status_categoria'] == status]
            axes[1, 0].scatter(
                data['num_comments_sem_outliers'],
                data['num_participants'],
                alpha=0.5,
                label=status,
                s=30
            )
        axes[1, 0].set_title('Coment√°rios vs Participantes por Status')
        axes[1, 0].set_xlabel('N√∫mero de Coment√°rios')
        axes[1, 0].set_ylabel('N√∫mero de Participantes')
        axes[1, 0].legend()
        
        # Gr√°fico de barras por categoria de intera√ß√µes
        df_interacoes = self.df.groupby(['interacoes_categoria', 'status_categoria']).size().unstack(fill_value=0)
        df_interacoes_pct = df_interacoes.div(df_interacoes.sum(axis=1), axis=0) * 100
        df_interacoes_pct.plot(kind='bar', ax=axes[1, 1], rot=45)
        axes[1, 1].set_title('Propor√ß√£o de Status por N√≠vel de Intera√ß√£o')
        axes[1, 1].set_xlabel('N√≠vel de Intera√ß√£o')
        axes[1, 1].set_ylabel('Porcentagem (%)')
        axes[1, 1].legend(title='Status')
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq04_interacoes_vs_status.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq04_interacoes_vs_status.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ04'] = {
            'titulo': 'Intera√ß√µes nos PRs vs Feedback Final',
            'u_stat_comments': u_stat_comments,
            'p_value_comments': p_value_comments,
            'u_stat_participants': u_stat_participants,
            'p_value_participants': p_value_participants,
            'merged_mean_comments': merged_comments['mean'],
            'closed_mean_comments': closed_comments['mean'],
            'merged_mean_participants': merged_participants['mean'],
            'closed_mean_participants': closed_participants['mean'],
            'significativo_comments': p_value_comments < 0.05,
            'significativo_participants': p_value_participants < 0.05
        }
    
    # ========================================================================
    # DIMENS√ÉO B: N√öMERO DE REVIS√ïES
    # ========================================================================
    
    def rq05_tamanho_vs_revisoes(self):
        """
        RQ 05: Qual a rela√ß√£o entre o tamanho dos PRs e o n√∫mero de revis√µes realizadas?
        
        Nota: Como n√£o temos a contagem exata de revis√µes no dataset, vamos usar
        o n√∫mero de participantes como proxy para o n√∫mero de revis√µes.
        """
        print("=" * 80)
        print("RQ 05: TAMANHO DOS PRS vs N√öMERO DE REVIS√ïES")
        print("=" * 80)
        print()
        
        # Usar num_participants como proxy para n√∫mero de revis√µes
        corr, p_value = self.calcular_correlacao('total_changes', 'num_participants')
        
        print("üìä An√°lise de Correla√ß√£o:")
        print(f"  ‚Ä¢ Correla√ß√£o de Spearman: {corr:.4f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o da correla√ß√£o: {self.interpretar_correlacao(corr)}")
        print(f"  ‚Ä¢ Signific√¢ncia: {self.interpretar_p_valor(p_value)}")
        
        # Estat√≠sticas por categoria de tamanho
        print(f"\nüìà M√©dia de Participantes por Categoria de Tamanho:")
        stats_tamanho = self.df.groupby('tamanho_categoria')['num_participants'].agg(['mean', 'median', 'std'])
        for idx, row in stats_tamanho.iterrows():
            print(f"  ‚Ä¢ {idx}: m√©dia={row['mean']:.2f}, mediana={row['median']:.2f}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Scatter plot
        axes[0].scatter(
            self.df['total_changes_sem_outliers'],
            self.df['num_participants'],
            alpha=0.5,
            s=30
        )
        axes[0].set_title('Tamanho do PR vs N√∫mero de Participantes')
        axes[0].set_xlabel('Total de Mudan√ßas (linhas)')
        axes[0].set_ylabel('N√∫mero de Participantes')
        
        # Adicionar linha de tend√™ncia
        z = np.polyfit(self.df['total_changes_sem_outliers'].dropna(), 
                       self.df['num_participants'].dropna(), 1)
        p = np.poly1d(z)
        axes[0].plot(
            sorted(self.df['total_changes_sem_outliers'].dropna()),
            p(sorted(self.df['total_changes_sem_outliers'].dropna())),
            "r--",
            alpha=0.8,
            label=f'Tend√™ncia (œÅ={corr:.3f})'
        )
        axes[0].legend()
        
        # Boxplot por categoria
        self.df.boxplot(column='num_participants', by='tamanho_categoria', ax=axes[1])
        axes[1].set_title('N√∫mero de Participantes por Categoria de Tamanho')
        axes[1].set_xlabel('Categoria de Tamanho do PR')
        axes[1].set_ylabel('N√∫mero de Participantes')
        plt.sca(axes[1])
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq05_tamanho_vs_revisoes.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq05_tamanho_vs_revisoes.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ05'] = {
            'titulo': 'Tamanho dos PRs vs N√∫mero de Revis√µes',
            'correlacao': corr,
            'p_value': p_value,
            'interpretacao': self.interpretar_correlacao(corr),
            'significativo': p_value < 0.05
        }
    
    def rq06_tempo_vs_revisoes(self):
        """
        RQ 06: Qual a rela√ß√£o entre o tempo de an√°lise dos PRs e o n√∫mero de revis√µes realizadas?
        """
        print("=" * 80)
        print("RQ 06: TEMPO DE AN√ÅLISE vs N√öMERO DE REVIS√ïES")
        print("=" * 80)
        print()
        
        # Usar num_participants como proxy para n√∫mero de revis√µes
        corr, p_value = self.calcular_correlacao('time_analysis_hours', 'num_participants')
        
        print("üìä An√°lise de Correla√ß√£o:")
        print(f"  ‚Ä¢ Correla√ß√£o de Spearman: {corr:.4f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o da correla√ß√£o: {self.interpretar_correlacao(corr)}")
        print(f"  ‚Ä¢ Signific√¢ncia: {self.interpretar_p_valor(p_value)}")
        
        # Estat√≠sticas por categoria de tempo
        print(f"\nüìà M√©dia de Participantes por Categoria de Tempo:")
        stats_tempo = self.df.groupby('tempo_categoria')['num_participants'].agg(['mean', 'median', 'std'])
        for idx, row in stats_tempo.iterrows():
            print(f"  ‚Ä¢ {idx}: m√©dia={row['mean']:.2f}, mediana={row['median']:.2f}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Scatter plot
        axes[0].scatter(
            self.df['time_analysis_hours_sem_outliers'],
            self.df['num_participants'],
            alpha=0.5,
            s=30
        )
        axes[0].set_title('Tempo de An√°lise vs N√∫mero de Participantes')
        axes[0].set_xlabel('Tempo de An√°lise (horas)')
        axes[0].set_ylabel('N√∫mero de Participantes')
        
        # Adicionar linha de tend√™ncia
        z = np.polyfit(self.df['time_analysis_hours_sem_outliers'].dropna(), 
                       self.df['num_participants'].dropna(), 1)
        p = np.poly1d(z)
        axes[0].plot(
            sorted(self.df['time_analysis_hours_sem_outliers'].dropna()),
            p(sorted(self.df['time_analysis_hours_sem_outliers'].dropna())),
            "r--",
            alpha=0.8,
            label=f'Tend√™ncia (œÅ={corr:.3f})'
        )
        axes[0].legend()
        
        # Boxplot por categoria
        self.df.boxplot(column='num_participants', by='tempo_categoria', ax=axes[1])
        axes[1].set_title('N√∫mero de Participantes por Categoria de Tempo')
        axes[1].set_xlabel('Categoria de Tempo de An√°lise')
        axes[1].set_ylabel('N√∫mero de Participantes')
        plt.sca(axes[1])
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq06_tempo_vs_revisoes.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq06_tempo_vs_revisoes.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ06'] = {
            'titulo': 'Tempo de An√°lise vs N√∫mero de Revis√µes',
            'correlacao': corr,
            'p_value': p_value,
            'interpretacao': self.interpretar_correlacao(corr),
            'significativo': p_value < 0.05
        }
    
    def rq07_descricao_vs_revisoes(self):
        """
        RQ 07: Qual a rela√ß√£o entre a descri√ß√£o dos PRs e o n√∫mero de revis√µes realizadas?
        """
        print("=" * 80)
        print("RQ 07: DESCRI√á√ÉO DOS PRS vs N√öMERO DE REVIS√ïES")
        print("=" * 80)
        print()
        
        # Usar num_participants como proxy para n√∫mero de revis√µes
        corr, p_value = self.calcular_correlacao('description_chars', 'num_participants')
        
        print("üìä An√°lise de Correla√ß√£o:")
        print(f"  ‚Ä¢ Correla√ß√£o de Spearman: {corr:.4f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o da correla√ß√£o: {self.interpretar_correlacao(corr)}")
        print(f"  ‚Ä¢ Signific√¢ncia: {self.interpretar_p_valor(p_value)}")
        
        # Estat√≠sticas por categoria de descri√ß√£o
        print(f"\nüìà M√©dia de Participantes por Categoria de Descri√ß√£o:")
        stats_desc = self.df.groupby('descricao_categoria')['num_participants'].agg(['mean', 'median', 'std'])
        for idx, row in stats_desc.iterrows():
            print(f"  ‚Ä¢ {idx}: m√©dia={row['mean']:.2f}, mediana={row['median']:.2f}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Scatter plot
        axes[0].scatter(
            self.df['description_chars_sem_outliers'],
            self.df['num_participants'],
            alpha=0.5,
            s=30
        )
        axes[0].set_title('Tamanho da Descri√ß√£o vs N√∫mero de Participantes')
        axes[0].set_xlabel('Tamanho da Descri√ß√£o (caracteres)')
        axes[0].set_ylabel('N√∫mero de Participantes')
        
        # Adicionar linha de tend√™ncia
        z = np.polyfit(self.df['description_chars_sem_outliers'].dropna(), 
                       self.df['num_participants'].dropna(), 1)
        p = np.poly1d(z)
        axes[0].plot(
            sorted(self.df['description_chars_sem_outliers'].dropna()),
            p(sorted(self.df['description_chars_sem_outliers'].dropna())),
            "r--",
            alpha=0.8,
            label=f'Tend√™ncia (œÅ={corr:.3f})'
        )
        axes[0].legend()
        
        # Boxplot por categoria
        self.df.boxplot(column='num_participants', by='descricao_categoria', ax=axes[1])
        axes[1].set_title('N√∫mero de Participantes por Categoria de Descri√ß√£o')
        axes[1].set_xlabel('Categoria de Descri√ß√£o')
        axes[1].set_ylabel('N√∫mero de Participantes')
        plt.sca(axes[1])
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq07_descricao_vs_revisoes.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq07_descricao_vs_revisoes.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ07'] = {
            'titulo': 'Descri√ß√£o dos PRs vs N√∫mero de Revis√µes',
            'correlacao': corr,
            'p_value': p_value,
            'interpretacao': self.interpretar_correlacao(corr),
            'significativo': p_value < 0.05
        }
    
    def rq08_interacoes_vs_revisoes(self):
        """
        RQ 08: Qual a rela√ß√£o entre as intera√ß√µes nos PRs e o n√∫mero de revis√µes realizadas?
        """
        print("=" * 80)
        print("RQ 08: INTERA√á√ïES vs N√öMERO DE REVIS√ïES")
        print("=" * 80)
        print()
        
        # Correla√ß√£o entre coment√°rios e participantes
        corr, p_value = self.calcular_correlacao('num_comments', 'num_participants')
        
        print("üìä An√°lise de Correla√ß√£o:")
        print(f"  ‚Ä¢ Correla√ß√£o de Spearman: {corr:.4f}")
        print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
        print(f"  ‚Ä¢ Interpreta√ß√£o da correla√ß√£o: {self.interpretar_correlacao(corr)}")
        print(f"  ‚Ä¢ Signific√¢ncia: {self.interpretar_p_valor(p_value)}")
        
        # Estat√≠sticas por categoria de intera√ß√µes
        print(f"\nüìà M√©dia de Participantes por Categoria de Intera√ß√µes:")
        stats_inter = self.df.groupby('interacoes_categoria')['num_participants'].agg(['mean', 'median', 'std'])
        for idx, row in stats_inter.iterrows():
            print(f"  ‚Ä¢ {idx}: m√©dia={row['mean']:.2f}, mediana={row['median']:.2f}")
        
        # Visualiza√ß√£o
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Scatter plot
        axes[0].scatter(
            self.df['num_comments_sem_outliers'],
            self.df['num_participants'],
            alpha=0.5,
            s=30
        )
        axes[0].set_title('N√∫mero de Coment√°rios vs N√∫mero de Participantes')
        axes[0].set_xlabel('N√∫mero de Coment√°rios')
        axes[0].set_ylabel('N√∫mero de Participantes')
        
        # Adicionar linha de tend√™ncia
        z = np.polyfit(self.df['num_comments_sem_outliers'].dropna(), 
                       self.df['num_participants'].dropna(), 1)
        p = np.poly1d(z)
        axes[0].plot(
            sorted(self.df['num_comments_sem_outliers'].dropna()),
            p(sorted(self.df['num_comments_sem_outliers'].dropna())),
            "r--",
            alpha=0.8,
            label=f'Tend√™ncia (œÅ={corr:.3f})'
        )
        axes[0].legend()
        
        # Boxplot por categoria
        self.df.boxplot(column='num_participants', by='interacoes_categoria', ax=axes[1])
        axes[1].set_title('N√∫mero de Participantes por Categoria de Intera√ß√µes')
        axes[1].set_xlabel('Categoria de Intera√ß√µes')
        axes[1].set_ylabel('N√∫mero de Participantes')
        plt.sca(axes[1])
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.savefig(self.caminho_graficos / 'rq08_interacoes_vs_revisoes.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"\n‚úì Gr√°fico salvo: graficos/rq08_interacoes_vs_revisoes.png")
        print()
        
        # Armazenar resultados
        self.resultados['RQ08'] = {
            'titulo': 'Intera√ß√µes vs N√∫mero de Revis√µes',
            'correlacao': corr,
            'p_value': p_value,
            'interpretacao': self.interpretar_correlacao(corr),
            'significativo': p_value < 0.05
        }
    
    def gerar_relatorio_final(self):
        """
        Gera um relat√≥rio final em formato Markdown com todos os resultados
        """
        print("=" * 80)
        print("GERANDO RELAT√ìRIO FINAL")
        print("=" * 80)
        print()
        
        # Criar diret√≥rio de relat√≥rios
        caminho_relatorio = self.caminho_base / "relatorio_sprint2.md"
        
        with open(caminho_relatorio, 'w', encoding='utf-8') as f:
            # Cabe√ßalho
            f.write("# Sprint 2 - An√°lise de Pull Requests do GitHub\n\n")
            f.write(f"**Data da an√°lise:** {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
            f.write(f"**Dataset:** {len(self.df)} Pull Requests\n\n")
            f.write(f"**Reposit√≥rios analisados:** {self.df['repository'].nunique()}\n\n")
            f.write("---\n\n")
            
            # Sum√°rio executivo
            f.write("## Sum√°rio Executivo\n\n")
            f.write("Este relat√≥rio apresenta os resultados da an√°lise de code review em reposit√≥rios populares do GitHub, ")
            f.write("investigando as rela√ß√µes entre caracter√≠sticas dos PRs e dois outcomes principais:\n\n")
            f.write("1. **Dimens√£o A:** Feedback final das revis√µes (PR merged ou closed)\n")
            f.write("2. **Dimens√£o B:** N√∫mero de revis√µes realizadas (proxy: n√∫mero de participantes)\n\n")
            f.write("---\n\n")
            
            # Estat√≠sticas descritivas gerais
            f.write("## Estat√≠sticas Descritivas Gerais\n\n")
            
            f.write("### Status dos PRs\n\n")
            merged_count = len(self.df[self.df['merged'] == True])
            closed_count = len(self.df[self.df['merged'] == False])
            f.write(f"- **PRs Merged:** {merged_count} ({merged_count/len(self.df)*100:.1f}%)\n")
            f.write(f"- **PRs Closed (n√£o merged):** {closed_count} ({closed_count/len(self.df)*100:.1f}%)\n\n")
            
            f.write("### M√©tricas Gerais\n\n")
            f.write("| M√©trica | M√©dia | Mediana | Desvio Padr√£o |\n")
            f.write("|---------|-------|---------|---------------|\n")
            
            metricas = ['total_changes', 'time_analysis_hours', 'description_chars', 'num_comments', 'num_participants']
            nomes = ['Mudan√ßas (linhas)', 'Tempo (horas)', 'Descri√ß√£o (chars)', 'Coment√°rios', 'Participantes']
            
            for metrica, nome in zip(metricas, nomes):
                stats = self.df[metrica].describe()
                f.write(f"| {nome} | {stats['mean']:.2f} | {stats['50%']:.2f} | {stats['std']:.2f} |\n")
            
            f.write("\n---\n\n")
            
            # Dimens√£o A: Feedback Final
            f.write("## Dimens√£o A: Feedback Final das Revis√µes\n\n")
            
            # RQ01
            f.write("### RQ 01: Tamanho dos PRs vs Feedback Final\n\n")
            rq01 = self.resultados['RQ01']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre o tamanho dos PRs e o feedback final das revis√µes?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- PRs **merged** t√™m em m√©dia **{rq01['merged_mean']:.2f} linhas** de mudan√ßas\n")
            f.write(f"- PRs **closed** t√™m em m√©dia **{rq01['closed_mean']:.2f} linhas** de mudan√ßas\n")
            f.write(f"- Teste Mann-Whitney U: U={rq01['u_stat']:.2f}, p={rq01['p_value']:.4f}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq01['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq01['significativo']:
                if rq01['merged_mean'] < rq01['closed_mean']:
                    f.write("PRs menores t√™m maior probabilidade de serem merged.\n\n")
                else:
                    f.write("PRs maiores t√™m maior probabilidade de serem merged.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de que o tamanho influencie o status final do PR.\n\n")
            
            f.write(f"![RQ01](graficos/rq01_tamanho_vs_status.png)\n\n")
            f.write("---\n\n")
            
            # RQ02
            f.write("### RQ 02: Tempo de An√°lise vs Feedback Final\n\n")
            rq02 = self.resultados['RQ02']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre o tempo de an√°lise dos PRs e o feedback final das revis√µes?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- PRs **merged** levam em m√©dia **{rq02['merged_mean']:.2f} horas** ({rq02['merged_mean']/24:.2f} dias)\n")
            f.write(f"- PRs **closed** levam em m√©dia **{rq02['closed_mean']:.2f} horas** ({rq02['closed_mean']/24:.2f} dias)\n")
            f.write(f"- Teste Mann-Whitney U: U={rq02['u_stat']:.2f}, p={rq02['p_value']:.4f}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq02['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq02['significativo']:
                if rq02['merged_mean'] < rq02['closed_mean']:
                    f.write("PRs que s√£o merged tendem a ser analisados mais rapidamente.\n\n")
                else:
                    f.write("PRs que s√£o merged tendem a levar mais tempo para serem analisados.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de que o tempo de an√°lise influencie o status final do PR.\n\n")
            
            f.write(f"![RQ02](graficos/rq02_tempo_vs_status.png)\n\n")
            f.write("---\n\n")
            
            # RQ03
            f.write("### RQ 03: Descri√ß√£o dos PRs vs Feedback Final\n\n")
            rq03 = self.resultados['RQ03']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre a descri√ß√£o dos PRs e o feedback final das revis√µes?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- PRs **merged** t√™m em m√©dia **{rq03['merged_mean']:.2f} caracteres** na descri√ß√£o\n")
            f.write(f"- PRs **closed** t√™m em m√©dia **{rq03['closed_mean']:.2f} caracteres** na descri√ß√£o\n")
            f.write(f"- Teste Mann-Whitney U: U={rq03['u_stat']:.2f}, p={rq03['p_value']:.4f}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq03['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq03['significativo']:
                if rq03['merged_mean'] > rq03['closed_mean']:
                    f.write("Descri√ß√µes mais detalhadas est√£o associadas a maior probabilidade de merge.\n\n")
                else:
                    f.write("Descri√ß√µes mais curtas est√£o associadas a maior probabilidade de merge.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de que o tamanho da descri√ß√£o influencie o status final do PR.\n\n")
            
            f.write(f"![RQ03](graficos/rq03_descricao_vs_status.png)\n\n")
            f.write("---\n\n")
            
            # RQ04
            f.write("### RQ 04: Intera√ß√µes nos PRs vs Feedback Final\n\n")
            rq04 = self.resultados['RQ04']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre as intera√ß√µes nos PRs e o feedback final das revis√µes?\n\n")
            f.write("**Resultados - Coment√°rios:**\n\n")
            f.write(f"- PRs **merged** t√™m em m√©dia **{rq04['merged_mean_comments']:.2f} coment√°rios**\n")
            f.write(f"- PRs **closed** t√™m em m√©dia **{rq04['closed_mean_comments']:.2f} coment√°rios**\n")
            f.write(f"- Teste Mann-Whitney U: U={rq04['u_stat_comments']:.2f}, p={rq04['p_value_comments']:.4f}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq04['significativo_comments'] else '‚úó N√£o significativo'}\n\n")
            
            f.write("**Resultados - Participantes:**\n\n")
            f.write(f"- PRs **merged** t√™m em m√©dia **{rq04['merged_mean_participants']:.2f} participantes**\n")
            f.write(f"- PRs **closed** t√™m em m√©dia **{rq04['closed_mean_participants']:.2f} participantes**\n")
            f.write(f"- Teste Mann-Whitney U: U={rq04['u_stat_participants']:.2f}, p={rq04['p_value_participants']:.4f}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq04['significativo_participants'] else '‚úó N√£o significativo'}\n\n")
            
            f.write("**Interpreta√ß√£o:** ")
            if rq04['significativo_comments'] or rq04['significativo_participants']:
                f.write("O n√≠vel de intera√ß√£o (coment√°rios e/ou participantes) influencia o status final do PR.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de que o n√≠vel de intera√ß√£o influencie o status final do PR.\n\n")
            
            f.write(f"![RQ04](graficos/rq04_interacoes_vs_status.png)\n\n")
            f.write("---\n\n")
            
            # Dimens√£o B: N√∫mero de Revis√µes
            f.write("## Dimens√£o B: N√∫mero de Revis√µes Realizadas\n\n")
            f.write("*Nota: O n√∫mero de participantes √© usado como proxy para o n√∫mero de revis√µes.*\n\n")
            
            # RQ05
            f.write("### RQ 05: Tamanho dos PRs vs N√∫mero de Revis√µes\n\n")
            rq05 = self.resultados['RQ05']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre o tamanho dos PRs e o n√∫mero de revis√µes realizadas?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- Correla√ß√£o de Spearman: œÅ={rq05['correlacao']:.4f}\n")
            f.write(f"- P-valor: p={rq05['p_value']:.4f}\n")
            f.write(f"- Interpreta√ß√£o: Correla√ß√£o {rq05['interpretacao']}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq05['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq05['significativo']:
                if rq05['correlacao'] > 0:
                    f.write("PRs maiores tendem a ter mais revisores participando.\n\n")
                else:
                    f.write("PRs menores tendem a ter mais revisores participando.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de correla√ß√£o entre o tamanho do PR e o n√∫mero de revis√µes.\n\n")
            
            f.write(f"![RQ05](graficos/rq05_tamanho_vs_revisoes.png)\n\n")
            f.write("---\n\n")
            
            # RQ06
            f.write("### RQ 06: Tempo de An√°lise vs N√∫mero de Revis√µes\n\n")
            rq06 = self.resultados['RQ06']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre o tempo de an√°lise dos PRs e o n√∫mero de revis√µes realizadas?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- Correla√ß√£o de Spearman: œÅ={rq06['correlacao']:.4f}\n")
            f.write(f"- P-valor: p={rq06['p_value']:.4f}\n")
            f.write(f"- Interpreta√ß√£o: Correla√ß√£o {rq06['interpretacao']}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq06['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq06['significativo']:
                if rq06['correlacao'] > 0:
                    f.write("PRs que levam mais tempo tendem a ter mais revisores participando.\n\n")
                else:
                    f.write("PRs mais r√°pidos tendem a ter mais revisores participando.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de correla√ß√£o entre o tempo de an√°lise e o n√∫mero de revis√µes.\n\n")
            
            f.write(f"![RQ06](graficos/rq06_tempo_vs_revisoes.png)\n\n")
            f.write("---\n\n")
            
            # RQ07
            f.write("### RQ 07: Descri√ß√£o dos PRs vs N√∫mero de Revis√µes\n\n")
            rq07 = self.resultados['RQ07']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre a descri√ß√£o dos PRs e o n√∫mero de revis√µes realizadas?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- Correla√ß√£o de Spearman: œÅ={rq07['correlacao']:.4f}\n")
            f.write(f"- P-valor: p={rq07['p_value']:.4f}\n")
            f.write(f"- Interpreta√ß√£o: Correla√ß√£o {rq07['interpretacao']}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq07['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq07['significativo']:
                if rq07['correlacao'] > 0:
                    f.write("PRs com descri√ß√µes mais detalhadas tendem a ter mais revisores participando.\n\n")
                else:
                    f.write("PRs com descri√ß√µes mais curtas tendem a ter mais revisores participando.\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de correla√ß√£o entre o tamanho da descri√ß√£o e o n√∫mero de revis√µes.\n\n")
            
            f.write(f"![RQ07](graficos/rq07_descricao_vs_revisoes.png)\n\n")
            f.write("---\n\n")
            
            # RQ08
            f.write("### RQ 08: Intera√ß√µes vs N√∫mero de Revis√µes\n\n")
            rq08 = self.resultados['RQ08']
            f.write(f"**Quest√£o:** Qual a rela√ß√£o entre as intera√ß√µes nos PRs e o n√∫mero de revis√µes realizadas?\n\n")
            f.write("**Resultados:**\n\n")
            f.write(f"- Correla√ß√£o de Spearman: œÅ={rq08['correlacao']:.4f}\n")
            f.write(f"- P-valor: p={rq08['p_value']:.4f}\n")
            f.write(f"- Interpreta√ß√£o: Correla√ß√£o {rq08['interpretacao']}\n")
            f.write(f"- **Signific√¢ncia:** {'‚úì Significativo' if rq08['significativo'] else '‚úó N√£o significativo'}\n\n")
            f.write("**Interpreta√ß√£o:** ")
            if rq08['significativo']:
                if rq08['correlacao'] > 0:
                    f.write("PRs com mais coment√°rios tendem a ter mais revisores participando (esperado).\n\n")
                else:
                    f.write("PRs com menos coment√°rios tendem a ter mais revisores participando (contra-intuitivo).\n\n")
            else:
                f.write("N√£o h√° evid√™ncia estat√≠stica de correla√ß√£o entre coment√°rios e participantes.\n\n")
            
            f.write(f"![RQ08](graficos/rq08_interacoes_vs_revisoes.png)\n\n")
            f.write("---\n\n")
            
            # Conclus√µes
            f.write("## Conclus√µes Gerais\n\n")
            
            # Contar quantas RQs foram significativas
            sig_count = sum([
                self.resultados[f'RQ0{i}']['significativo'] for i in range(1, 5)
            ] + [
                self.resultados[f'RQ0{i}']['significativo'] for i in range(5, 9)
            ])
            
            f.write(f"Das 8 quest√µes de pesquisa analisadas, **{sig_count} apresentaram resultados estatisticamente significativos** (p < 0.05).\n\n")
            
            f.write("### Principais Achados:\n\n")
            f.write("**Dimens√£o A - Feedback Final:**\n\n")
            
            for i in range(1, 5):
                rq = self.resultados[f'RQ0{i}']
                if rq['significativo']:
                    f.write(f"- ‚úì **RQ0{i}:** {rq['titulo']} - Rela√ß√£o significativa encontrada\n")
                else:
                    f.write(f"- ‚úó **RQ0{i}:** {rq['titulo']} - Sem rela√ß√£o significativa\n")
            
            f.write("\n**Dimens√£o B - N√∫mero de Revis√µes:**\n\n")
            
            for i in range(5, 9):
                rq = self.resultados[f'RQ0{i}']
                if rq['significativo']:
                    f.write(f"- ‚úì **RQ0{i}:** {rq['titulo']} - Rela√ß√£o significativa encontrada\n")
                else:
                    f.write(f"- ‚úó **RQ0{i}:** {rq['titulo']} - Sem rela√ß√£o significativa\n")
            
            f.write("\n---\n\n")
            
            # Metodologia
            f.write("## Metodologia\n\n")
            f.write("### Testes Estat√≠sticos Utilizados:\n\n")
            f.write("1. **Teste de Mann-Whitney U:** Para comparar duas grupos independentes (PRs merged vs closed)\n")
            f.write("   - N√£o param√©trico, n√£o assume distribui√ß√£o normal\n")
            f.write("   - Apropriado para dados com outliers\n\n")
            f.write("2. **Correla√ß√£o de Spearman:** Para medir a associa√ß√£o entre duas vari√°veis cont√≠nuas\n")
            f.write("   - N√£o param√©trica, baseada em ranks\n")
            f.write("   - Detecta rela√ß√µes monot√¥nicas (n√£o apenas lineares)\n\n")
            f.write("### N√≠vel de Signific√¢ncia:\n\n")
            f.write("- Œ± = 0.05 (5%)\n")
            f.write("- Resultados com p < 0.05 s√£o considerados estatisticamente significativos\n\n")
            f.write("### Tratamento de Outliers:\n\n")
            f.write("- Outliers extremos foram tratados usando clipping nos percentis 1% e 99%\n")
            f.write("- Dados originais preservados para an√°lises robustas\n\n")
            
            f.write("---\n\n")
            f.write(f"*Relat√≥rio gerado automaticamente pela Sprint 2 em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*\n")
        
        print(f"‚úì Relat√≥rio salvo: relatorio_sprint2.md")
        print()
    
    def executar_analise_completa(self):
        """
        Executa a an√°lise completa de todas as RQs
        """
        # Carregar dados
        if not self.carregar_dados():
            return False
        
        # Preparar dados
        self.preparar_dados()
        
        # Dimens√£o A: Feedback Final
        self.rq01_tamanho_vs_status()
        self.rq02_tempo_vs_status()
        self.rq03_descricao_vs_status()
        self.rq04_interacoes_vs_status()
        
        # Dimens√£o B: N√∫mero de Revis√µes
        self.rq05_tamanho_vs_revisoes()
        self.rq06_tempo_vs_revisoes()
        self.rq07_descricao_vs_revisoes()
        self.rq08_interacoes_vs_revisoes()
        
        # Gerar relat√≥rio final
        self.gerar_relatorio_final()
        
        print("=" * 80)
        print("‚úì SPRINT 2 CONCLU√çDA COM SUCESSO!")
        print("=" * 80)
        print()
        print(f"üìä Gr√°ficos salvos em: {self.caminho_graficos}")
        print(f"üìÑ Relat√≥rio completo: relatorio_sprint2.md")
        print()
        
        return True

def main():
    """
    Fun√ß√£o principal para executar a Sprint 2
    """
    analisador = AnalisadorPRs()
    analisador.executar_analise_completa()

if __name__ == "__main__":
    main()

